package com.genexus.cryptography.test.mac;

import com.genexus.cryptography.mac.Hmac;
import com.genexus.securityapicommons.config.EncodingUtil;
import com.genexus.securityapicommons.keys.SymmetricKeyGenerator;
import com.genexus.securityapicommons.utils.SecurityUtils;
import com.genexus.test.commons.SecurityAPITestObject;

import junit.framework.Test;
import junit.framework.TestSuite;

public class HmacTest extends SecurityAPITestObject {

	protected static String plainText;
	protected String[] arrayHashes;
	protected static String password;
	protected static String passUTF8;
	protected String[] arrayResHashes;

	private static String[] encodings;
	private static EncodingUtil eu;

	@Override
	protected void setUp() {
		SymmetricKeyGenerator keyGen = new SymmetricKeyGenerator();
		password = keyGen.doGenerateKey("GENERICRANDOM", 128);
		passUTF8 = "64887e525dce27351f5cb5ce85615e52";
		plainText = "Lorem ipsum dolor sit amet";
		arrayHashes = new String[] { "MD5", "SHA1", "SHA224", "SHA256", "SHA384", "SHA512", "BLAKE2B_224",
			"BLAKE2B_256", "BLAKE2B_384", "BLAKE2B_512", "BLAKE2S_128", "BLAKE2S_160", "BLAKE2S_224", "BLAKE2S_256",
			"GOST3411_2012_256", "GOST3411_2012_512", "GOST3411", "KECCAK_224", "KECCAK_256", "KECCAK_288",
			"KECCAK_384", "KECCAK_512", "MD2", "MD4", "RIPEMD128", "RIPEMD160", "RIPEMD256", "RIPEMD320",
			"SHA3-224", "SHA3-256", "SHA3-384", "SHA3-512", /*"SHAKE_128", "SHAKE_256",*/ "SM3", "TIGER", "WHIRLPOOL" };

		encodings = new String[] { "UTF_8", "UTF_16", "UTF_16BE", "UTF_16LE", "UTF_32", "UTF_32BE", "UTF_32LE", "SJIS",
			"GB2312" };

		eu = new EncodingUtil();

		String MD5 = "41A5B12FFE84175A2982A8D500B1EBAF";
		String SHA1 = "50D4AE631960E8D040FBEC617EF442B7AB251221";
		String SHA224 = "F441D15E93F2BAA1B5379A5F16B878307A21D5BEDCB61A987F01CE61";
		String SHA256 = "6B0E8EB91ED3EAE87A0AD4E1293F8FC50C2C297E4FAEC07AA43AB47E49CB7B1F";
		String SHA384 = "04C3B9B5A874D95749D6134073FB27C2B4E02D701BC5A2B5D3A0CCC345EA66B8D3C57036977DE686CBFBFFEEC2398218";
		String SHA512 = "E9A2125DBA53A4227DE74855526BA4816C6B45B5D001318C3D069D2DF94359A93099F6CDBC14710D8D3B5B956037192B44EEF8C32DE32E3AF59D24BDFC3E5DAF";
		String BLAKE2B_224 = "26CF9B1A316F1FD854DF19163C7B8C142618254DA200A20635E1D698";
		String BLAKE2B_256 = "9F78D7ACAFDA844CADD4F57817E1A368776A7D783B61BC95D174097BAC9E12BC";
		String BLAKE2B_384 = "2E2205934FB1057E3A347958180170FCE5F4DFA5ACC7623EA79BD6BC9CDAC2E57A192A77E2B9B0FE87D24BAB5BDDEEF2";
		String BLAKE2B_512 = "453EBB12652903F1C0DB44A86CF4D8DE8BD10BBDDCAE20C62ABFA16B3F7F289E10D69AAE6BEACEEEDD4CB4C42B1181C2964B95B7AE18A342605E969536A21B47";
		String BLAKE2S_128 = "9FF71F18EB2D3A9E21D5F7CD17BCF5C9";
		String BLAKE2S_160 = "CE919197A9207946EEC7DEDD2DA8F0CFCE3D10B8";
		String BLAKE2S_224 = "4CFE71196DAEAB298B31362BB2B908C667C2395DB45E717328093F21";
		String BLAKE2S_256 = "B4272BFA822369C40A3FA584739755E47F2EEE3D1A109CA010773B79883E5581";
		String GOST3411_2012_256 = "4BB2AC559E3A163BDFEC294339DE624AA90CFA5E91812477FCF43EC8692EA8E9";
		String GOST3411_2012_512 = "B96ABD6DCAB30DF76777B214AD243EC5C9349D5017A2D2F196499757AE31EAC121C72ADC457081BBF6B0763E9AE32472B7D85F1E1342B3104E5F2934F2DC83A0";
		String GOST3411 = "CA0BCB7E5C49CDFA68F2D0B53F52670626C3EDEABEA8335CBC7ED1FDFC8200D8";
		String KECCAK_224 = "1FE172D71F537B6F83B23E24E744C5E880E25F0051DCEC3B1F678327";
		String KECCAK_256 = "BFDFB4872184A37996A6A8544A3ABB84C1968D46F89E0839B3BDF7C8E87C2E4F";
		String KECCAK_288 = "6C49617278C34213B98CB90510ADD1346DEF8D0FB90B0F693553E0FFB41CB5D425C5A2EF";
		String KECCAK_384 = "B37946F7370758D7656B8D48DD9704B1AECBB4A2C58CBA0DD4B1FC730EACC9D42CCE666FD216A5238C127D4552CEA6D7";
		String KECCAK_512 = "0CCBD557A60DA24082FF20EA8A1987516BBDA2ACAD23DAA27C47F20082BA940A8D7B298C08395180A56DA5E68E90BBCC4A56B1C51431BF9AAB1A10B72BC988D4";
		String MD2 = "4F13A1C9AE27F3EF6D824DF30A1E2290";
		String MD4 = "8FB02C3DFC1E5F570BBDDDAF844D74F2";
		String RIPEMD128 = "AE3231A70E15B56FB15FE6947BACF32B";
		String RIPEMD160 = "BB7AC728783394986A6085DE3CA4CABA1B16B35B";
		String RIPEMD256 = "C0AA36C7D7A5F4C9ADA1A33976DEB7D8E61A55D5B6378F023A011A92AEFB8FC7";
		String RIPEMD320 = "34DABB9D5E807F77309A59289B7F339CB824C963DF66EBCEF56E3499630D86B2E31E0AC98C50EED4";
		String SHA3_224 = "621437AB69507712BC89DDB9128E1DF19894357AAB3637557CAD39B9";
		String SHA3_256 = "3B19CB71223B73C8B8BE4E9CAE8FDF9FDCFB53B0CE8788749F5EBDD186C90620";
		String SHA3_384 = "C3682F9296438F8A6F83599FB9F37F40C8EAC20A63B3F3E889C34982CD5B22FEEF5B1B23816B5047303C4BB953F68B57";
		String SHA3_512 = "0B9BD9EB8D6A6F7A2E64FAD66798250B5007CEC289BB6354973D02BD1BA94F4FF6C4561E75781D784FD0620515D67BD084956542CE80D7B6E49FE06E8CB755B5";
		//String SHAKE_128 = "F08CC5D7EA62097A1B180F2902CD287B";
		//String SHAKE_256 = "D760B7E606CD64BBEDACA6B36F3F2D9EE0D9EBD84B5CC195999AB549CDE60914";
		String SM3 = "8F447ED2CF879D5001CAE681041DE38326C55B948846168997D3C304AEA32D6D";
		String TIGER = "FEF8448095FC19DFCE2E6B6CAE8BA594D3DC358E910473B2";
		String WHIRLPOOL = "594BDF03B876331E3642685A497DDEC69894403422ABCB6ADE0E77999DA030027EA613027E0E18A3D42190110DEBE75357412EB7567EEF9C7CB170BCCFC3E7EC";

		arrayResHashes = new String[] { MD5, SHA1, SHA224, SHA256, SHA384, SHA512, BLAKE2B_224, BLAKE2B_256,
			BLAKE2B_384, BLAKE2B_512, BLAKE2S_128, BLAKE2S_160, BLAKE2S_224, BLAKE2S_256, GOST3411_2012_256,
			GOST3411_2012_512, GOST3411, KECCAK_224, KECCAK_256, KECCAK_288, KECCAK_384, KECCAK_512, MD2, MD4,
			RIPEMD128, RIPEMD160, RIPEMD256, RIPEMD320, SHA3_224, SHA3_256, SHA3_384, SHA3_512, /*SHAKE_128,
				SHAKE_256,*/ SM3, TIGER, WHIRLPOOL };

	}

	public void testBulkMacs() {
		for (int i = 0; i < encodings.length; i++) {
			eu.setEncoding(encodings[i]);
			Hmac mac = new Hmac();
			for (int a = 0; a < arrayHashes.length; a++) {
				if (SecurityUtils.compareStrings(encodings[i], "UTF_8")) {
					String res = mac.calculate(plainText, passUTF8, arrayHashes[a]);
					assertTrue(SecurityUtils.compareStrings(res, arrayResHashes[a]));
					True(true, mac);
				}
				String result = mac.calculate(plainText, password, arrayHashes[a]);
				assertTrue(mac.verify(plainText, password, result, arrayHashes[a]));
				True(true, mac);
			}
		}
	}

	public static Test suite() {
		return new TestSuite(HmacTest.class);
	}

	@Override
	public void runTest() {
		testBulkMacs();
	}
}
